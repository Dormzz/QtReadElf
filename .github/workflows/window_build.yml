# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Windows Build

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [  windows-latest]
        build_type: [ Release ]
        c_compiler: [ clang ]
        include:
          - os: windows-latest
            c_compiler: clang
            cpp_compiler: clang

    steps:
      - uses: actions/checkout@v3

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Install Qt on Windows
        if: matrix.os == 'windows-latest'
        uses: jurplel/install-qt-action@v3
        with:
          version: '6.6.1'
          arch: 'win64_mingw'

      - name: Set QT_DIR environment variable
        run: |
          echo "QT_DIR=${{ steps.install-qt.outputs.qtPath }}" >> $GITHUB_ENV
          echo "PATH=${{ env.PATH }};${{ steps.install-qt.outputs.qtPath }}/bin" >> $GITHUB_ENV

      - name: Configure CMake with MinGW
        run: |
          cmake -B ${{ github.workspace }}/build `
          -G "MinGW Makefiles" `
          -DCMAKE_PREFIX_PATH=${{ env.QTDIR }}/mingw_64 `
          -DCMAKE_BUILD_TYPE=Release `
          -S ${{ github.workspace }}

      - name: Build with MinGW
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: |
          cmake clean
          cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}


      - name: upload Win-QtReadELF
        uses: actions/upload-artifact@v2
        with:
          name: Win-QtReadELF
          path: ${{github.workspace}}/build/QtReadELF.exe
      - name: upload Win-QtReadELF-WithQtEnv
        uses: actions/upload-artifact@v2
        with:
          name: Win-QtReadELF-WithQtEnv
          path: ${{github.workspace}}/build/QtReadELF_With_QTEnv.zip